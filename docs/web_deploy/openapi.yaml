openapi: 3.0.0
info:
  version: 1.0.0
  title: blob_api
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/blobs:
    post:
      tags:
        - Blobs
      summary: Create blob
      operationId: createBlob
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/Blob'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Blob'
    get:
      tags:
        - Blobs
      summary: Get blobs list
      operationId: getBlobsList
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageLimitParam'
        - $ref: '#/components/parameters/sortingParam'
        - in: query
          name: 'filter[ownerid]'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blob'
  '/integrations/blobs/{id}':
    parameters:
      - name: id
        in: path
        description: Blob identifier
        required: true
        schema:
          type: integer
    get:
      tags:
        - Blobs
      summary: Get blob
      operationId: getBlob
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Blob'
    delete:
      tags:
        - Blobs
      summary: Delete Blob
      operationId: deleteBlob
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Blob'
        '400':
          description: invalid request
components:
  schemas:
    Blob:
      allOf:
        - $ref: '#/components/schemas/BlobKey'
        - type: object
          required:
            - relationships
            - attributes
          properties:
            relationships:
              type: object
              required:
                - owner
              properties:
                owner:
                  type: object
                  required:
                    - data
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/UserKey'
            attributes:
              type: object
              required:
                - blob
                - purpose
                - user_address
              properties:
                user_address:
                  type: string
                  example: '0x750Bd531CEA1f68418DDF2373193CfbD86A69058'
                blob:
                  type: object
                  format: json.RawMessage
                purpose:
                  type: string
                  example: KYC
    BlobKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - blob
        id:
          type: string
          example: '1'
    UserKey:
      type: object
      required:
        - id
        - type
        - address
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          enum:
            - user
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
