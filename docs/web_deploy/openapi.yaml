openapi: 3.0.0
info:
  version: 1.0.0
  title: blob_api
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /blobs:
    post:
      tags:
        - Blobs
      summary: Create blob
      operationId: createBlob
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/Blob'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Blob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/CreateBlobError'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags:
        - Blobs
      summary: Get blobs list
      operationId: getBlobsList
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageLimitParam'
        - $ref: '#/components/parameters/sortingParam'
        - in: query
          name: 'filter[address]'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                properties:
                  errors:
                    type: array
  '/blobs/{id}':
    parameters:
      - name: id
        in: path
        description: Blob identifier
        required: true
        schema:
          type: integer
    get:
      tags:
        - Blobs
      summary: Get blob
      operationId: getBlob
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Blob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetBlobError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Blobs
      summary: Delete Blob
      operationId: deleteBlob
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetBlobError'
        '500':
          $ref: '#/components/responses/InternalError'
  /documents:
    post:
      tags:
        - Document
      summary: Upload Document
      description: Upload Document
      operationId: getUploadDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Document:
                  type: object
                  $ref: '#/components/schemas/Document'
                Image:
                  type: string
                  format: base64
            encoding:
              profileImage:
                contentType: 'image/png, image/jpeg'
        description: Upload Document
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/DocumentKey'
components:
  schemas:
    Blob:
      allOf:
        - $ref: '#/components/schemas/BlobKey'
        - type: object
          required:
            - relationships
            - attributes
          properties:
            relationships:
              type: object
              required:
                - owner
              properties:
                owner:
                  type: object
                  required:
                    - data
                  description: Blob owner
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/OwnerKey'
            attributes:
              type: object
              required:
                - blob
                - purpose
              properties:
                blob:
                  type: object
                  format: json.RawMessage
                purpose:
                  type: string
                  example: KYC
    BlobKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - blob
        id:
          type: string
          example: '1'
    Document:
      allOf:
        - $ref: '#/components/schemas/DocumentKey'
        - type: object
          required:
            - attributes
            - relationships
          properties:
            attributes:
              type: object
              required:
                - purpose
              properties:
                purpose:
                  type: string
                  enum:
                    - kyc
            relationships:
              type: object
              required:
                - owner
              properties:
                owner:
                  type: object
                  required:
                    - data
                  description: Document owner
                  properties:
                    data:
                      $ref: '#/components/schemas/OwnerKey'
    DocumentKey:
      type: object
      required:
        - type
      properties:
        type:
          description: document type
          type: string
          enum:
            - passport
        id:
          type: string
          example: '123'
    BadRequestError:
      type: object
      required:
        - title
        - status
        - code
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
          example: Bad Request
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
          example: Your request was invalid in some way.
        status:
          type: integer
          description: HTTP status code applicable to this problem
          enum:
            - 400
        code:
          type: string
          description: 'Application-specific error code, expressed as a string value'
          enum:
            - bad_request
            - bad_request_data
        meta:
          type: object
          description: Object containing non-standard meta-information about the error
          example:
            error: 'failed to verify issuer: failed to create a request: invalid url'
            error_info: Issuer check failed.
    CreateBlobError:
      type: object
      required:
        - title
        - status
        - code
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
          example: Bad Request
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
          example: Some data in the request was invalid. Please refer to the service documentation.
        status:
          type: integer
          description: HTTP status code applicable to this problem
          enum:
            - 400
        code:
          type: string
          example: signature_verification_failed
          description: |-
            Application-specific error code, expressed as a string value


            General Request Codes:
            * "blob_body_empty"
            * "invalid_owner_address"
            * "invalid_puprose"
            * "invalid_type"
        meta:
          type: object
          description: Object containing non-standard meta-information about the error
          example:
            error: 'failed to parse string: unsupported characters'
    GetBlobError:
      type: object
      required:
        - title
        - status
        - code
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
          example: Bad Request
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
          example: Some data in the request was invalid. Please refer to the service documentation.
        status:
          type: integer
          description: HTTP status code applicable to this problem
          enum:
            - 400
        code:
          type: string
          example: signature_verification_failed
          description: |-
            Application-specific error code, expressed as a string value

            General Request Codes:
            * "invalid_id"
        meta:
          type: object
          description: Object containing non-standard meta-information about the error
          example:
            error: 'failed to parse string: unsupported characters'
    InternalError:
      type: object
      required:
        - title
        - status
        - code
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
          example: Internal Error
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
          example: Some internal error occurred. Please report this error to service maintainers.
        status:
          type: integer
          description: HTTP status code applicable to this problem
          enum:
            - 500
        code:
          type: string
          description: 'Application-specific error code, expressed as a string value'
          enum:
            - internal_error
    NotFoundError:
      type: object
      required:
        - title
        - status
        - code
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
          example: Not Found
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
          example: The requested resource could not be found.
        status:
          type: integer
          description: HTTP status code applicable to this problem
          enum:
            - 404
        code:
          type: string
          description: 'Application-specific error code, expressed as a string value'
          enum:
            - not_found
    OwnerKey:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: owner address
          example: '0x750Bd531CEA1f68418DDF2373193CfbD86A69058'
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestError'
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/InternalError'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/NotFoundError'
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
